name: Build and Deploy Atria

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  BACKEND_IMAGE: sbtl/atria-backend
  FRONTEND_IMAGE: sbtl/atria-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate unique image tag
      id: generate-tag
      run: |
        TAG="${GITHUB_SHA::8}-$(date +%s)"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Generated tag: ${TAG}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile.backend.prod
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:${{ steps.generate-tag.outputs.tag }}
          ${{ env.BACKEND_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile.frontend.prod
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:${{ steps.generate-tag.outputs.tag }}
          ${{ env.FRONTEND_IMAGE }}:latest
        build-args: |
          VITE_API_URL=https://atria.sbtl.dev/api
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to k3s server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.K3S_HOST }}
        username: ${{ secrets.K3S_USER }}
        key: ${{ secrets.K3S_SSH_KEY }}
        port: ${{ secrets.K3S_PORT }}
        script: |
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          
          # Set KUBECONFIG to use user's config
          export KUBECONFIG=$HOME/.kube/config
          
          # Pull the new images with specific tag
          echo "Pulling new Docker images with tag: ${IMAGE_TAG}"
          sudo k3s crictl pull ${{ env.BACKEND_IMAGE }}:${IMAGE_TAG}
          sudo k3s crictl pull ${{ env.FRONTEND_IMAGE }}:${IMAGE_TAG}
          
          # Update deployments with specific image tag
          echo "Updating Kubernetes deployments..."
          kubectl set image deployment/backend-deployment backend=${{ env.BACKEND_IMAGE }}:${IMAGE_TAG} -n atria
          kubectl set image deployment/frontend-deployment frontend=${{ env.FRONTEND_IMAGE }}:${IMAGE_TAG} -n atria
          
          # Wait for rollout to complete
          echo "Waiting for backend rollout..."
          kubectl rollout status deployment/backend-deployment -n atria --timeout=300s
          
          echo "Waiting for frontend rollout..."
          kubectl rollout status deployment/frontend-deployment -n atria --timeout=300s
          
          echo "Deployment completed successfully!"