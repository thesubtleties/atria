name: Test Suite

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: public.ecr.aws/docker/library/postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_atria
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: public.ecr.aws/docker/library/redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/atria/requirements.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        cd backend/atria
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask pytest-mock pytest-factoryboy factory-boy faker

    - name: Create test database
      env:
        PGPASSWORD: test_pass
      run: |
        psql -h localhost -U test_user -d test_atria -c "SELECT 1"

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_atria
        SQLALCHEMY_DATABASE_URI: postgresql://test_user:test_pass@localhost:5432/test_atria
        FLASK_APP: api.app:create_app
        FLASK_ENV: testing
      run: |
        cd backend/atria
        flask db upgrade

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_atria
        SQLALCHEMY_DATABASE_URI: postgresql://test_user:test_pass@localhost:5432/test_atria
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key-for-testing
        FLASK_ENV: testing
        TESTING: true
        SECRET_KEY: test-secret-key
      run: |
        cd backend/atria
        pytest tests/ \
          --cov=api \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html:htmlcov \
          -v \
          --tb=short \
          --maxfail=5

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/atria/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload HTML coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: backend/atria/htmlcov/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      continue-on-error: true
      run: |
        cd frontend
        npm run lint || echo "::warning::Linting completed with warnings"

    - name: Check for test script
      id: check_tests
      run: |
        cd frontend
        if grep -q '"test"' package.json; then
          echo "has_tests=true" >> $GITHUB_OUTPUT
        else
          echo "has_tests=false" >> $GITHUB_OUTPUT
          echo "::warning::No test script found in package.json"
        fi

    - name: Run tests
      if: steps.check_tests.outputs.has_tests == 'true'
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: http://localhost:5000/api

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  integration-tests:
    name: Integration Tests (Optional)
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    continue-on-error: true  # Don't fail the workflow if this job fails

    services:
      postgres:
        image: public.ecr.aws/docker/library/postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_atria
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: public.ecr.aws/docker/library/redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test images
      run: |
        docker compose -f docker-compose.test.yml build

    - name: Start services
      run: |
        docker compose -f docker-compose.test.yml up -d
        sleep 10  # Wait for services to be ready

    - name: Check service health
      run: |
        docker compose -f docker-compose.test.yml ps
        curl -f http://localhost:5000/api/health || exit 1
        curl -f http://localhost:5173 || exit 1

    - name: Run API integration tests
      run: |
        # TODO: Enable when integration tests are implemented
        echo "::warning::Integration tests are not yet implemented"
        # docker compose -f docker-compose.test.yml exec -T backend \
        #   pytest tests/ -m integration -v

    - name: Stop services
      if: always()
      run: |
        docker compose -f docker-compose.test.yml down -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r backend/atria/api/ -f json -o bandit-report.json || true
        cat bandit-report.json

    - name: Upload Bandit report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=high || true

    - name: Run safety check
      run: |
        pip install safety
        cd backend/atria
        safety check --json || true

  test-summary:
    name: Test Summary
    needs: [backend-tests, frontend-tests, security-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.backend-tests.result }}" != "success" ]; then
          echo "::error::Backend tests failed"
          exit 1
        fi
        if [ "${{ needs.frontend-tests.result }}" != "success" ]; then
          echo "::warning::Frontend tests had issues (linting warnings or missing tests)"
          # Don't exit with error for now
        fi
        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "::warning::Security scan had issues"
        fi
        echo "::notice::All tests passed successfully!"