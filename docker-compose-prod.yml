# docker-compose.yml
version: '3.8'

services:
  backend:
    container_name: ${BACKEND_CONTAINER_NAME:-atria-api}
    build:
      context: ./backend/atria
      dockerfile: Dockerfile
    expose:
      - '${BACKEND_PORT:-5000}'
    volumes:
      - ./backend/atria:/app
    env_file:
      - .env
      - ./backend/atria/.flaskenv
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_CONTAINER_NAME}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - default
      - shared_portainer_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${BACKEND_PORT}/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    container_name: ${FRONTEND_CONTAINER_NAME:-atria-client}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - '${FRONTEND_PORT:-5173}'
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://${BACKEND_CONTAINER_NAME}:${BACKEND_PORT}/api
    depends_on:
      - backend
    networks:
      - default
      - shared_portainer_network

  db:
    container_name: ${DB_CONTAINER_NAME:-atria-db}
    image: postgres:15-alpine
    volumes:
      - atria_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    expose:
      - '${POSTGRES_PORT:-5432}'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - default
      - shared_portainer_network

volumes:
  atria_postgres_data:

networks:
  default:
  shared_portainer_network:
    external: true
