/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Atria API
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  DefaultErrorResponse,
  EventBranding,
  EventCreate,
  EventDetail,
  EventSpeakerInfoUpdate,
  EventUpdate,
  EventUserCreate,
  EventUserDetail,
  EventUserUpdate,
  GetApiEventsEventIdSessions200,
  GetApiEventsEventIdSessionsParams,
  GetApiEventsEventIdUsers200,
  GetApiEventsEventIdUsersParams,
  GetApiOrganizations200,
  GetApiOrganizationsOrgIdEvents200,
  GetApiOrganizationsOrgIdEventsParams,
  GetApiOrganizationsOrgIdUsers200,
  GetApiOrganizationsOrgIdUsersParams,
  GetApiOrganizationsParams,
  GetApiSessionsSessionIdSpeakers200,
  GetApiSessionsSessionIdSpeakersParams,
  GetApiUsersUserIdEvents200,
  GetApiUsersUserIdEventsParams,
  GetApiUsersUserIdSpeakingSessionsParams,
  Login,
  OrganizationCreate,
  OrganizationDetail,
  OrganizationUpdate,
  OrganizationUserCreate,
  OrganizationUserDetail,
  OrganizationUserUpdate,
  PostApiAuthLogin200,
  PostApiAuthLogout200,
  PostApiAuthRefresh200,
  PostApiAuthSignup201,
  SchemaMeta2,
  SchemaMeta3,
  SchemaMeta4,
  SessionCreate,
  SessionDetail,
  SessionSpeakerDetailSchema,
  SessionSpeakerSchema,
  SessionStatusUpdate,
  SessionTimesUpdate,
  SessionUpdate,
  Signup,
  UnprocessableContentResponse,
  UserDetail,
  UserUpdate,
} from "../schemas";
import { axiosInstance } from "../../lib/axios";

/**
 * Authenticates user credentials and returns tokens
 * @summary Authenticate user
 */
export const postApiAuthLogin = (login: Login, signal?: AbortSignal) => {
  return axiosInstance<PostApiAuthLogin200>({
    url: `/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: login,
    signal,
  });
};

export const getPostApiAuthLoginMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: Login }, TContext>;
}) => {
  const mutationKey = ["postApiAuthLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogin>>,
    { data: Login }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: Login },
    TContext
  >;
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type PostApiAuthLoginMutationBody = Login;
export type PostApiAuthLoginMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Authenticate user
 */
export const usePostApiAuthLogin = <
  TData = Awaited<ReturnType<typeof postApiAuthLogin>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: Login }, TContext>;
}): UseMutationResult<TData, TError, { data: Login }, TContext> => {
  const mutationOptions = getPostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get new access token using refresh token
 * @summary Refresh access token
 */
export const postApiAuthRefresh = (signal?: AbortSignal) => {
  return axiosInstance<PostApiAuthRefresh200>({
    url: `/api/auth/refresh`,
    method: "POST",
    signal,
  });
};

export const getPostApiAuthRefreshMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiAuthRefresh>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, void, TContext>;
}) => {
  const mutationKey = ["postApiAuthRefresh"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthRefresh>>,
    void
  > = () => {
    return postApiAuthRefresh();
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    void,
    TContext
  >;
};

export type PostApiAuthRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthRefresh>>
>;

export type PostApiAuthRefreshMutationError = void | DefaultErrorResponse;

/**
 * @summary Refresh access token
 */
export const usePostApiAuthRefresh = <
  TData = Awaited<ReturnType<typeof postApiAuthRefresh>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, void, TContext>;
}): UseMutationResult<TData, TError, void, TContext> => {
  const mutationOptions = getPostApiAuthRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Revoke current access token
 * @summary Logout user
 */
export const postApiAuthLogout = (signal?: AbortSignal) => {
  return axiosInstance<PostApiAuthLogout200>({
    url: `/api/auth/logout`,
    method: "POST",
    signal,
  });
};

export const getPostApiAuthLogoutMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiAuthLogout>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, void, TContext>;
}) => {
  const mutationKey = ["postApiAuthLogout"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthLogout>>,
    void
  > = () => {
    return postApiAuthLogout();
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    void,
    TContext
  >;
};

export type PostApiAuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogout>>
>;

export type PostApiAuthLogoutMutationError = void | DefaultErrorResponse;

/**
 * @summary Logout user
 */
export const usePostApiAuthLogout = <
  TData = Awaited<ReturnType<typeof postApiAuthLogout>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, void, TContext>;
}): UseMutationResult<TData, TError, void, TContext> => {
  const mutationOptions = getPostApiAuthLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Create new user account and return tokens
 * @summary Register new user
 */
export const postApiAuthSignup = (signup: Signup, signal?: AbortSignal) => {
  return axiosInstance<PostApiAuthSignup201>({
    url: `/api/auth/signup`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: signup,
    signal,
  });
};

export const getPostApiAuthSignupMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiAuthSignup>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: Signup }, TContext>;
}) => {
  const mutationKey = ["postApiAuthSignup"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiAuthSignup>>,
    { data: Signup }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthSignup(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: Signup },
    TContext
  >;
};

export type PostApiAuthSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthSignup>>
>;
export type PostApiAuthSignupMutationBody = Signup;
export type PostApiAuthSignupMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Register new user
 */
export const usePostApiAuthSignup = <
  TData = Awaited<ReturnType<typeof postApiAuthSignup>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: Signup }, TContext>;
}): UseMutationResult<TData, TError, { data: Signup }, TContext> => {
  const mutationOptions = getPostApiAuthSignupMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get detailed information about a user
 * @summary Get user profile
 */
export const getApiUsersUserId = (userId: number, signal?: AbortSignal) => {
  return axiosInstance<UserDetail>({
    url: `/api/users/${userId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersUserIdQueryKey = (userId: number) => {
  return [`/api/users/${userId}`] as const;
};

export const getGetApiUsersUserIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserId>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersUserId>>
  > = ({ signal }) => getApiUsersUserId(userId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiUsersUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersUserIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersUserId>>
>;
export type GetApiUsersUserIdInfiniteQueryError = void | DefaultErrorResponse;

export function useGetApiUsersUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserId>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserId>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserId>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user profile
 */

export function useGetApiUsersUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserId>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersUserIdInfiniteQueryOptions(
    userId,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiUsersUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersUserId>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersUserId>>
  > = ({ signal }) => getApiUsersUserId(userId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersUserId>>
>;
export type GetApiUsersUserIdQueryError = void | DefaultErrorResponse;

export function useGetApiUsersUserId<
  TData = Awaited<ReturnType<typeof getApiUsersUserId>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserId<
  TData = Awaited<ReturnType<typeof getApiUsersUserId>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserId<
  TData = Awaited<ReturnType<typeof getApiUsersUserId>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user profile
 */

export function useGetApiUsersUserId<
  TData = Awaited<ReturnType<typeof getApiUsersUserId>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersUserIdQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update user's own profile information
 * @summary Update user profile
 */
export const putApiUsersUserId = (userId: number, userUpdate: UserUpdate) => {
  return axiosInstance<UserDetail>({
    url: `/api/users/${userId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: userUpdate,
  });
};

export const getPutApiUsersUserIdMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiUsersUserId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { userId: number; data: UserUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiUsersUserId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiUsersUserId>>,
    { userId: number; data: UserUpdate }
  > = (props) => {
    const { userId, data } = props ?? {};

    return putApiUsersUserId(userId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { userId: number; data: UserUpdate },
    TContext
  >;
};

export type PutApiUsersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiUsersUserId>>
>;
export type PutApiUsersUserIdMutationBody = UserUpdate;
export type PutApiUsersUserIdMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update user profile
 */
export const usePutApiUsersUserId = <
  TData = Awaited<ReturnType<typeof putApiUsersUserId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { userId: number; data: UserUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { userId: number; data: UserUpdate },
  TContext
> => {
  const mutationOptions = getPutApiUsersUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get all events a user is participating in
 * @summary Get user's events
 */
export const getApiUsersUserIdEvents = (
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetApiUsersUserIdEvents200>({
    url: `/api/users/${userId}/events`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiUsersUserIdEventsQueryKey = (
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
) => {
  return [`/api/users/${userId}/events`, ...(params ? [params] : [])] as const;
};

export const getGetApiUsersUserIdEventsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserIdEvents>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsersUserIdEventsQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersUserIdEvents>>
  > = ({ signal }) => getApiUsersUserIdEvents(userId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersUserIdEventsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersUserIdEvents>>
>;
export type GetApiUsersUserIdEventsInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiUsersUserIdEventsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserIdEvents>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params: undefined | GetApiUsersUserIdEventsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdEventsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserIdEvents>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdEventsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserIdEvents>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user's events
 */

export function useGetApiUsersUserIdEventsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersUserIdEvents>>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersUserIdEventsInfiniteQueryOptions(
    userId,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiUsersUserIdEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsersUserIdEventsQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersUserIdEvents>>
  > = ({ signal }) => getApiUsersUserIdEvents(userId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersUserIdEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersUserIdEvents>>
>;
export type GetApiUsersUserIdEventsQueryError = void | DefaultErrorResponse;

export function useGetApiUsersUserIdEvents<
  TData = Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params: undefined | GetApiUsersUserIdEventsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdEvents<
  TData = Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdEvents<
  TData = Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user's events
 */

export function useGetApiUsersUserIdEvents<
  TData = Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdEvents>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersUserIdEventsQueryOptions(
    userId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all sessions where user is speaking
 * @summary Get user's speaking sessions
 */
export const getApiUsersUserIdSpeakingSessions = (
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>({
    url: `/api/users/${userId}/speaking-sessions`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiUsersUserIdSpeakingSessionsQueryKey = (
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
) => {
  return [
    `/api/users/${userId}/speaking-sessions`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiUsersUserIdSpeakingSessionsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
  >,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsersUserIdSpeakingSessionsQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
  > = ({ signal }) => getApiUsersUserIdSpeakingSessions(userId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersUserIdSpeakingSessionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
>;
export type GetApiUsersUserIdSpeakingSessionsInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiUsersUserIdSpeakingSessionsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
  >,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params: undefined | GetApiUsersUserIdSpeakingSessionsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdSpeakingSessionsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
  >,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdSpeakingSessionsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
  >,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user's speaking sessions
 */

export function useGetApiUsersUserIdSpeakingSessionsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
  >,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersUserIdSpeakingSessionsInfiniteQueryOptions(
    userId,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiUsersUserIdSpeakingSessionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsersUserIdSpeakingSessionsQueryKey(userId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
  > = ({ signal }) => getApiUsersUserIdSpeakingSessions(userId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersUserIdSpeakingSessionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>
>;
export type GetApiUsersUserIdSpeakingSessionsQueryError =
  void | DefaultErrorResponse;

export function useGetApiUsersUserIdSpeakingSessions<
  TData = Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params: undefined | GetApiUsersUserIdSpeakingSessionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdSpeakingSessions<
  TData = Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersUserIdSpeakingSessions<
  TData = Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get user's speaking sessions
 */

export function useGetApiUsersUserIdSpeakingSessions<
  TData = Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
  TError = void | DefaultErrorResponse,
>(
  userId: number,
  params?: GetApiUsersUserIdSpeakingSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersUserIdSpeakingSessions>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersUserIdSpeakingSessionsQueryOptions(
    userId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Debug endpoint
 */
export const getApiUsersDebug = (signal?: AbortSignal) => {
  return axiosInstance<DefaultErrorResponse>({
    url: `/api/users/debug`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersDebugQueryKey = () => {
  return [`/api/users/debug`] as const;
};

export const getGetApiUsersDebugInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersDebug>>>,
  TError = DefaultErrorResponse,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getApiUsersDebug>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersDebugQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersDebug>>
  > = ({ signal }) => getApiUsersDebug(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiUsersDebug>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersDebugInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersDebug>>
>;
export type GetApiUsersDebugInfiniteQueryError = DefaultErrorResponse;

export function useGetApiUsersDebugInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersDebug>>>,
  TError = DefaultErrorResponse,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getApiUsersDebug>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUsersDebug>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersDebugInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersDebug>>>,
  TError = DefaultErrorResponse,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getApiUsersDebug>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUsersDebug>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersDebugInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersDebug>>>,
  TError = DefaultErrorResponse,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getApiUsersDebug>>,
      TError,
      TData
    >
  >;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Debug endpoint
 */

export function useGetApiUsersDebugInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiUsersDebug>>>,
  TError = DefaultErrorResponse,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getApiUsersDebug>>,
      TError,
      TData
    >
  >;
}): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersDebugInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiUsersDebugQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersDebug>>,
  TError = DefaultErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsersDebug>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersDebugQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersDebug>>
  > = ({ signal }) => getApiUsersDebug(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersDebug>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersDebugQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersDebug>>
>;
export type GetApiUsersDebugQueryError = DefaultErrorResponse;

export function useGetApiUsersDebug<
  TData = Awaited<ReturnType<typeof getApiUsersDebug>>,
  TError = DefaultErrorResponse,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsersDebug>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUsersDebug>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersDebug<
  TData = Awaited<ReturnType<typeof getApiUsersDebug>>,
  TError = DefaultErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsersDebug>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUsersDebug>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersDebug<
  TData = Awaited<ReturnType<typeof getApiUsersDebug>>,
  TError = DefaultErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsersDebug>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Debug endpoint
 */

export function useGetApiUsersDebug<
  TData = Awaited<ReturnType<typeof getApiUsersDebug>>,
  TError = DefaultErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsersDebug>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersDebugQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get organization details
 */
export const getApiOrganizationsOrgId = (
  orgId: number,
  signal?: AbortSignal,
) => {
  return axiosInstance<OrganizationDetail>({
    url: `/api/organizations/${orgId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiOrganizationsOrgIdQueryKey = (orgId: number) => {
  return [`/api/organizations/${orgId}`] as const;
};

export const getGetApiOrganizationsOrgIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizationsOrgId>>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiOrganizationsOrgIdQueryKey(orgId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrganizationsOrgId>>
  > = ({ signal }) => getApiOrganizationsOrgId(orgId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!orgId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrganizationsOrgIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrganizationsOrgId>>
>;
export type GetApiOrganizationsOrgIdInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiOrganizationsOrgIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizationsOrgId>>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizationsOrgId>>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizationsOrgId>>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get organization details
 */

export function useGetApiOrganizationsOrgIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizationsOrgId>>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrganizationsOrgIdInfiniteQueryOptions(
    orgId,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiOrganizationsOrgIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiOrganizationsOrgIdQueryKey(orgId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrganizationsOrgId>>
  > = ({ signal }) => getApiOrganizationsOrgId(orgId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!orgId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrganizationsOrgIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrganizationsOrgId>>
>;
export type GetApiOrganizationsOrgIdQueryError = void | DefaultErrorResponse;

export function useGetApiOrganizationsOrgId<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgId<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgId<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get organization details
 */

export function useGetApiOrganizationsOrgId<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrganizationsOrgIdQueryOptions(orgId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update organization
 */
export const putApiOrganizationsOrgId = (
  orgId: number,
  organizationUpdate: OrganizationUpdate,
) => {
  return axiosInstance<OrganizationDetail>({
    url: `/api/organizations/${orgId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: organizationUpdate,
  });
};

export const getPutApiOrganizationsOrgIdMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiOrganizationsOrgId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: OrganizationUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiOrganizationsOrgId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOrganizationsOrgId>>,
    { orgId: number; data: OrganizationUpdate }
  > = (props) => {
    const { orgId, data } = props ?? {};

    return putApiOrganizationsOrgId(orgId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: OrganizationUpdate },
    TContext
  >;
};

export type PutApiOrganizationsOrgIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiOrganizationsOrgId>>
>;
export type PutApiOrganizationsOrgIdMutationBody = OrganizationUpdate;
export type PutApiOrganizationsOrgIdMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update organization
 */
export const usePutApiOrganizationsOrgId = <
  TData = Awaited<ReturnType<typeof putApiOrganizationsOrgId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: OrganizationUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { orgId: number; data: OrganizationUpdate },
  TContext
> => {
  const mutationOptions = getPutApiOrganizationsOrgIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete organization
 */
export const deleteApiOrganizationsOrgId = (orgId: number) => {
  return axiosInstance<void>({
    url: `/api/organizations/${orgId}`,
    method: "DELETE",
  });
};

export const getDeleteApiOrganizationsOrgIdMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteApiOrganizationsOrgId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { orgId: number }, TContext>;
}) => {
  const mutationKey = ["deleteApiOrganizationsOrgId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiOrganizationsOrgId>>,
    { orgId: number }
  > = (props) => {
    const { orgId } = props ?? {};

    return deleteApiOrganizationsOrgId(orgId);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { orgId: number },
    TContext
  >;
};

export type DeleteApiOrganizationsOrgIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiOrganizationsOrgId>>
>;

export type DeleteApiOrganizationsOrgIdMutationError =
  void | DefaultErrorResponse;

/**
 * @summary Delete organization
 */
export const useDeleteApiOrganizationsOrgId = <
  TData = Awaited<ReturnType<typeof deleteApiOrganizationsOrgId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { orgId: number }, TContext>;
}): UseMutationResult<TData, TError, { orgId: number }, TContext> => {
  const mutationOptions =
    getDeleteApiOrganizationsOrgIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get all organizations user belongs to
 * @summary List user's organizations
 */
export const getApiOrganizations = (
  params?: GetApiOrganizationsParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetApiOrganizations200>({
    url: `/api/organizations`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiOrganizationsQueryKey = (
  params?: GetApiOrganizationsParams,
) => {
  return [`/api/organizations`, ...(params ? [params] : [])] as const;
};

export const getGetApiOrganizationsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizations>>>,
  TError = void | DefaultErrorResponse,
>(
  params?: GetApiOrganizationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrganizations>>
  > = ({ signal }) => getApiOrganizations(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrganizationsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrganizations>>
>;
export type GetApiOrganizationsInfiniteQueryError = void | DefaultErrorResponse;

export function useGetApiOrganizationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizations>>>,
  TError = void | DefaultErrorResponse,
>(
  params: undefined | GetApiOrganizationsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizations>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizations>>>,
  TError = void | DefaultErrorResponse,
>(
  params?: GetApiOrganizationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizations>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizations>>>,
  TError = void | DefaultErrorResponse,
>(
  params?: GetApiOrganizationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List user's organizations
 */

export function useGetApiOrganizationsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiOrganizations>>>,
  TError = void | DefaultErrorResponse,
>(
  params?: GetApiOrganizationsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrganizationsInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrganizations>>,
  TError = void | DefaultErrorResponse,
>(
  params?: GetApiOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrganizations>>
  > = ({ signal }) => getApiOrganizations(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrganizationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrganizations>>
>;
export type GetApiOrganizationsQueryError = void | DefaultErrorResponse;

export function useGetApiOrganizations<
  TData = Awaited<ReturnType<typeof getApiOrganizations>>,
  TError = void | DefaultErrorResponse,
>(
  params: undefined | GetApiOrganizationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizations>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizations<
  TData = Awaited<ReturnType<typeof getApiOrganizations>>,
  TError = void | DefaultErrorResponse,
>(
  params?: GetApiOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizations>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizations<
  TData = Awaited<ReturnType<typeof getApiOrganizations>>,
  TError = void | DefaultErrorResponse,
>(
  params?: GetApiOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List user's organizations
 */

export function useGetApiOrganizations<
  TData = Awaited<ReturnType<typeof getApiOrganizations>>,
  TError = void | DefaultErrorResponse,
>(
  params?: GetApiOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrganizationsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create new organization
 */
export const postApiOrganizations = (
  organizationCreate: OrganizationCreate,
  signal?: AbortSignal,
) => {
  return axiosInstance<OrganizationDetail>({
    url: `/api/organizations`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: organizationCreate,
    signal,
  });
};

export const getPostApiOrganizationsMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiOrganizations>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: OrganizationCreate },
    TContext
  >;
}) => {
  const mutationKey = ["postApiOrganizations"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOrganizations>>,
    { data: OrganizationCreate }
  > = (props) => {
    const { data } = props ?? {};

    return postApiOrganizations(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: OrganizationCreate },
    TContext
  >;
};

export type PostApiOrganizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOrganizations>>
>;
export type PostApiOrganizationsMutationBody = OrganizationCreate;
export type PostApiOrganizationsMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Create new organization
 */
export const usePostApiOrganizations = <
  TData = Awaited<ReturnType<typeof postApiOrganizations>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { data: OrganizationCreate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { data: OrganizationCreate },
  TContext
> => {
  const mutationOptions = getPostApiOrganizationsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary List organization users
 */
export const getApiOrganizationsOrgIdUsers = (
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetApiOrganizationsOrgIdUsers200>({
    url: `/api/organizations/${orgId}/users`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiOrganizationsOrgIdUsersQueryKey = (
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
) => {
  return [
    `/api/organizations/${orgId}/users`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiOrganizationsOrgIdUsersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiOrganizationsOrgIdUsersQueryKey(orgId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
  > = ({ signal }) => getApiOrganizationsOrgIdUsers(orgId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!orgId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrganizationsOrgIdUsersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
>;
export type GetApiOrganizationsOrgIdUsersInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiOrganizationsOrgIdUsersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params: undefined | GetApiOrganizationsOrgIdUsersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdUsersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdUsersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List organization users
 */

export function useGetApiOrganizationsOrgIdUsersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrganizationsOrgIdUsersInfiniteQueryOptions(
    orgId,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiOrganizationsOrgIdUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiOrganizationsOrgIdUsersQueryKey(orgId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
  > = ({ signal }) => getApiOrganizationsOrgIdUsers(orgId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!orgId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrganizationsOrgIdUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>
>;
export type GetApiOrganizationsOrgIdUsersQueryError =
  void | DefaultErrorResponse;

export function useGetApiOrganizationsOrgIdUsers<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params: undefined | GetApiOrganizationsOrgIdUsersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdUsers<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdUsers<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List organization users
 */

export function useGetApiOrganizationsOrgIdUsers<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdUsers>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrganizationsOrgIdUsersQueryOptions(
    orgId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Add user to organization
 */
export const postApiOrganizationsOrgIdUsers = (
  orgId: number,
  organizationUserCreate: OrganizationUserCreate,
  signal?: AbortSignal,
) => {
  return axiosInstance<OrganizationUserDetail>({
    url: `/api/organizations/${orgId}/users`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: organizationUserCreate,
    signal,
  });
};

export const getPostApiOrganizationsOrgIdUsersMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiOrganizationsOrgIdUsers>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: OrganizationUserCreate },
    TContext
  >;
}) => {
  const mutationKey = ["postApiOrganizationsOrgIdUsers"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOrganizationsOrgIdUsers>>,
    { orgId: number; data: OrganizationUserCreate }
  > = (props) => {
    const { orgId, data } = props ?? {};

    return postApiOrganizationsOrgIdUsers(orgId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: OrganizationUserCreate },
    TContext
  >;
};

export type PostApiOrganizationsOrgIdUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOrganizationsOrgIdUsers>>
>;
export type PostApiOrganizationsOrgIdUsersMutationBody = OrganizationUserCreate;
export type PostApiOrganizationsOrgIdUsersMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Add user to organization
 */
export const usePostApiOrganizationsOrgIdUsers = <
  TData = Awaited<ReturnType<typeof postApiOrganizationsOrgIdUsers>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: OrganizationUserCreate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { orgId: number; data: OrganizationUserCreate },
  TContext
> => {
  const mutationOptions =
    getPostApiOrganizationsOrgIdUsersMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update user role
 */
export const putApiOrganizationsOrgIdUsersUserId = (
  orgId: number,
  userId: number,
  organizationUserUpdate: OrganizationUserUpdate,
) => {
  return axiosInstance<OrganizationUserDetail>({
    url: `/api/organizations/${orgId}/users/${userId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: organizationUserUpdate,
  });
};

export const getPutApiOrganizationsOrgIdUsersUserIdMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiOrganizationsOrgIdUsersUserId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; userId: number; data: OrganizationUserUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiOrganizationsOrgIdUsersUserId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiOrganizationsOrgIdUsersUserId>>,
    { orgId: number; userId: number; data: OrganizationUserUpdate }
  > = (props) => {
    const { orgId, userId, data } = props ?? {};

    return putApiOrganizationsOrgIdUsersUserId(orgId, userId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { orgId: number; userId: number; data: OrganizationUserUpdate },
    TContext
  >;
};

export type PutApiOrganizationsOrgIdUsersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiOrganizationsOrgIdUsersUserId>>
>;
export type PutApiOrganizationsOrgIdUsersUserIdMutationBody =
  OrganizationUserUpdate;
export type PutApiOrganizationsOrgIdUsersUserIdMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update user role
 */
export const usePutApiOrganizationsOrgIdUsersUserId = <
  TData = Awaited<ReturnType<typeof putApiOrganizationsOrgIdUsersUserId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; userId: number; data: OrganizationUserUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { orgId: number; userId: number; data: OrganizationUserUpdate },
  TContext
> => {
  const mutationOptions =
    getPutApiOrganizationsOrgIdUsersUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Remove user from organization
 */
export const deleteApiOrganizationsOrgIdUsersUserId = (
  orgId: number,
  userId: number,
) => {
  return axiosInstance<void>({
    url: `/api/organizations/${orgId}/users/${userId}`,
    method: "DELETE",
  });
};

export const getDeleteApiOrganizationsOrgIdUsersUserIdMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteApiOrganizationsOrgIdUsersUserId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; userId: number },
    TContext
  >;
}) => {
  const mutationKey = ["deleteApiOrganizationsOrgIdUsersUserId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiOrganizationsOrgIdUsersUserId>>,
    { orgId: number; userId: number }
  > = (props) => {
    const { orgId, userId } = props ?? {};

    return deleteApiOrganizationsOrgIdUsersUserId(orgId, userId);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { orgId: number; userId: number },
    TContext
  >;
};

export type DeleteApiOrganizationsOrgIdUsersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiOrganizationsOrgIdUsersUserId>>
>;

export type DeleteApiOrganizationsOrgIdUsersUserIdMutationError =
  void | DefaultErrorResponse;

/**
 * @summary Remove user from organization
 */
export const useDeleteApiOrganizationsOrgIdUsersUserId = <
  TData = Awaited<ReturnType<typeof deleteApiOrganizationsOrgIdUsersUserId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; userId: number },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { orgId: number; userId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiOrganizationsOrgIdUsersUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get all events for an organization
 * @summary List organization events
 */
export const getApiOrganizationsOrgIdEvents = (
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetApiOrganizationsOrgIdEvents200>({
    url: `/api/organizations/${orgId}/events`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiOrganizationsOrgIdEventsQueryKey = (
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
) => {
  return [
    `/api/organizations/${orgId}/events`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiOrganizationsOrgIdEventsInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiOrganizationsOrgIdEventsQueryKey(orgId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
  > = ({ signal }) => getApiOrganizationsOrgIdEvents(orgId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!orgId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrganizationsOrgIdEventsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
>;
export type GetApiOrganizationsOrgIdEventsInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiOrganizationsOrgIdEventsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params: undefined | GetApiOrganizationsOrgIdEventsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdEventsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdEventsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List organization events
 */

export function useGetApiOrganizationsOrgIdEventsInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
  >,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrganizationsOrgIdEventsInfiniteQueryOptions(
    orgId,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiOrganizationsOrgIdEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiOrganizationsOrgIdEventsQueryKey(orgId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
  > = ({ signal }) => getApiOrganizationsOrgIdEvents(orgId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!orgId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiOrganizationsOrgIdEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>
>;
export type GetApiOrganizationsOrgIdEventsQueryError =
  void | DefaultErrorResponse;

export function useGetApiOrganizationsOrgIdEvents<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params: undefined | GetApiOrganizationsOrgIdEventsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdEvents<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiOrganizationsOrgIdEvents<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List organization events
 */

export function useGetApiOrganizationsOrgIdEvents<
  TData = Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
  TError = void | DefaultErrorResponse,
>(
  orgId: number,
  params?: GetApiOrganizationsOrgIdEventsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiOrganizationsOrgIdEvents>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiOrganizationsOrgIdEventsQueryOptions(
    orgId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new event in the organization
 * @summary Create new event
 */
export const postApiOrganizationsOrgIdEvents = (
  orgId: number,
  eventCreate: EventCreate,
  signal?: AbortSignal,
) => {
  return axiosInstance<EventDetail>({
    url: `/api/organizations/${orgId}/events`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: eventCreate,
    signal,
  });
};

export const getPostApiOrganizationsOrgIdEventsMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiOrganizationsOrgIdEvents>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: EventCreate },
    TContext
  >;
}) => {
  const mutationKey = ["postApiOrganizationsOrgIdEvents"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiOrganizationsOrgIdEvents>>,
    { orgId: number; data: EventCreate }
  > = (props) => {
    const { orgId, data } = props ?? {};

    return postApiOrganizationsOrgIdEvents(orgId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: EventCreate },
    TContext
  >;
};

export type PostApiOrganizationsOrgIdEventsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiOrganizationsOrgIdEvents>>
>;
export type PostApiOrganizationsOrgIdEventsMutationBody = EventCreate;
export type PostApiOrganizationsOrgIdEventsMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Create new event
 */
export const usePostApiOrganizationsOrgIdEvents = <
  TData = Awaited<ReturnType<typeof postApiOrganizationsOrgIdEvents>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { orgId: number; data: EventCreate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { orgId: number; data: EventCreate },
  TContext
> => {
  const mutationOptions =
    getPostApiOrganizationsOrgIdEventsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get event details
 */
export const getApiEventsEventId = (eventId: number, signal?: AbortSignal) => {
  return axiosInstance<EventDetail>({
    url: `/api/events/${eventId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiEventsEventIdQueryKey = (eventId: number) => {
  return [`/api/events/${eventId}`] as const;
};

export const getGetApiEventsEventIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventId>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiEventsEventIdQueryKey(eventId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiEventsEventId>>
  > = ({ signal }) => getApiEventsEventId(eventId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiEventsEventId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEventsEventIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiEventsEventId>>
>;
export type GetApiEventsEventIdInfiniteQueryError = void | DefaultErrorResponse;

export function useGetApiEventsEventIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventId>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventId>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventId>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get event details
 */

export function useGetApiEventsEventIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventId>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiEventsEventIdInfiniteQueryOptions(
    eventId,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiEventsEventIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiEventsEventId>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiEventsEventIdQueryKey(eventId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiEventsEventId>>
  > = ({ signal }) => getApiEventsEventId(eventId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiEventsEventId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEventsEventIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiEventsEventId>>
>;
export type GetApiEventsEventIdQueryError = void | DefaultErrorResponse;

export function useGetApiEventsEventId<
  TData = Awaited<ReturnType<typeof getApiEventsEventId>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventId<
  TData = Awaited<ReturnType<typeof getApiEventsEventId>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventId<
  TData = Awaited<ReturnType<typeof getApiEventsEventId>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get event details
 */

export function useGetApiEventsEventId<
  TData = Awaited<ReturnType<typeof getApiEventsEventId>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiEventsEventIdQueryOptions(eventId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update event
 */
export const putApiEventsEventId = (
  eventId: number,
  eventUpdate: EventUpdate,
) => {
  return axiosInstance<EventDetail>({
    url: `/api/events/${eventId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: eventUpdate,
  });
};

export const getPutApiEventsEventIdMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiEventsEventId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiEventsEventId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiEventsEventId>>,
    { eventId: number; data: EventUpdate }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return putApiEventsEventId(eventId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventUpdate },
    TContext
  >;
};

export type PutApiEventsEventIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiEventsEventId>>
>;
export type PutApiEventsEventIdMutationBody = EventUpdate;
export type PutApiEventsEventIdMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update event
 */
export const usePutApiEventsEventId = <
  TData = Awaited<ReturnType<typeof putApiEventsEventId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { eventId: number; data: EventUpdate },
  TContext
> => {
  const mutationOptions = getPutApiEventsEventIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete event
 */
export const deleteApiEventsEventId = (eventId: number) => {
  return axiosInstance<void>({
    url: `/api/events/${eventId}`,
    method: "DELETE",
  });
};

export const getDeleteApiEventsEventIdMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteApiEventsEventId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { eventId: number }, TContext>;
}) => {
  const mutationKey = ["deleteApiEventsEventId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiEventsEventId>>,
    { eventId: number }
  > = (props) => {
    const { eventId } = props ?? {};

    return deleteApiEventsEventId(eventId);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { eventId: number },
    TContext
  >;
};

export type DeleteApiEventsEventIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiEventsEventId>>
>;

export type DeleteApiEventsEventIdMutationError = void | DefaultErrorResponse;

/**
 * @summary Delete event
 */
export const useDeleteApiEventsEventId = <
  TData = Awaited<ReturnType<typeof deleteApiEventsEventId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { eventId: number }, TContext>;
}): UseMutationResult<TData, TError, { eventId: number }, TContext> => {
  const mutationOptions = getDeleteApiEventsEventIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update event branding
 */
export const putApiEventsEventIdBranding = (
  eventId: number,
  eventBranding: EventBranding,
) => {
  return axiosInstance<EventDetail>({
    url: `/api/events/${eventId}/branding`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: eventBranding,
  });
};

export const getPutApiEventsEventIdBrandingMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiEventsEventIdBranding>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventBranding },
    TContext
  >;
}) => {
  const mutationKey = ["putApiEventsEventIdBranding"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiEventsEventIdBranding>>,
    { eventId: number; data: EventBranding }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return putApiEventsEventIdBranding(eventId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventBranding },
    TContext
  >;
};

export type PutApiEventsEventIdBrandingMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiEventsEventIdBranding>>
>;
export type PutApiEventsEventIdBrandingMutationBody = EventBranding;
export type PutApiEventsEventIdBrandingMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update event branding
 */
export const usePutApiEventsEventIdBranding = <
  TData = Awaited<ReturnType<typeof putApiEventsEventIdBranding>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventBranding },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { eventId: number; data: EventBranding },
  TContext
> => {
  const mutationOptions =
    getPutApiEventsEventIdBrandingMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get all users associated with an event
 * @summary List event users
 */
export const getApiEventsEventIdUsers = (
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetApiEventsEventIdUsers200>({
    url: `/api/events/${eventId}/users`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiEventsEventIdUsersQueryKey = (
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
) => {
  return [`/api/events/${eventId}/users`, ...(params ? [params] : [])] as const;
};

export const getGetApiEventsEventIdUsersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdUsers>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiEventsEventIdUsersQueryKey(eventId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiEventsEventIdUsers>>
  > = ({ signal }) => getApiEventsEventIdUsers(eventId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEventsEventIdUsersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiEventsEventIdUsers>>
>;
export type GetApiEventsEventIdUsersInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiEventsEventIdUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdUsers>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params: undefined | GetApiEventsEventIdUsersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdUsers>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdUsers>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List event users
 */

export function useGetApiEventsEventIdUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdUsers>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiEventsEventIdUsersInfiniteQueryOptions(
    eventId,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiEventsEventIdUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiEventsEventIdUsersQueryKey(eventId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiEventsEventIdUsers>>
  > = ({ signal }) => getApiEventsEventIdUsers(eventId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEventsEventIdUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiEventsEventIdUsers>>
>;
export type GetApiEventsEventIdUsersQueryError = void | DefaultErrorResponse;

export function useGetApiEventsEventIdUsers<
  TData = Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params: undefined | GetApiEventsEventIdUsersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdUsers<
  TData = Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdUsers<
  TData = Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List event users
 */

export function useGetApiEventsEventIdUsers<
  TData = Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdUsers>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiEventsEventIdUsersQueryOptions(
    eventId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Add a user to an event with a specific role
 * @summary Add user to event
 */
export const postApiEventsEventIdUsers = (
  eventId: number,
  eventUserCreate: EventUserCreate,
  signal?: AbortSignal,
) => {
  return axiosInstance<EventUserDetail>({
    url: `/api/events/${eventId}/users`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: eventUserCreate,
    signal,
  });
};

export const getPostApiEventsEventIdUsersMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiEventsEventIdUsers>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventUserCreate },
    TContext
  >;
}) => {
  const mutationKey = ["postApiEventsEventIdUsers"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiEventsEventIdUsers>>,
    { eventId: number; data: EventUserCreate }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return postApiEventsEventIdUsers(eventId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventUserCreate },
    TContext
  >;
};

export type PostApiEventsEventIdUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiEventsEventIdUsers>>
>;
export type PostApiEventsEventIdUsersMutationBody = EventUserCreate;
export type PostApiEventsEventIdUsersMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Add user to event
 */
export const usePostApiEventsEventIdUsers = <
  TData = Awaited<ReturnType<typeof postApiEventsEventIdUsers>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: EventUserCreate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { eventId: number; data: EventUserCreate },
  TContext
> => {
  const mutationOptions = getPostApiEventsEventIdUsersMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update a user's role or information in an event
 * @summary Update user role or info
 */
export const putApiEventsEventIdUsersUserId = (
  eventId: number,
  userId: number,
  eventUserUpdate: EventUserUpdate,
) => {
  return axiosInstance<EventUserDetail>({
    url: `/api/events/${eventId}/users/${userId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: eventUserUpdate,
  });
};

export const getPutApiEventsEventIdUsersUserIdMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiEventsEventIdUsersUserId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number; data: EventUserUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiEventsEventIdUsersUserId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiEventsEventIdUsersUserId>>,
    { eventId: number; userId: number; data: EventUserUpdate }
  > = (props) => {
    const { eventId, userId, data } = props ?? {};

    return putApiEventsEventIdUsersUserId(eventId, userId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number; data: EventUserUpdate },
    TContext
  >;
};

export type PutApiEventsEventIdUsersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiEventsEventIdUsersUserId>>
>;
export type PutApiEventsEventIdUsersUserIdMutationBody = EventUserUpdate;
export type PutApiEventsEventIdUsersUserIdMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update user role or info
 */
export const usePutApiEventsEventIdUsersUserId = <
  TData = Awaited<ReturnType<typeof putApiEventsEventIdUsersUserId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number; data: EventUserUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { eventId: number; userId: number; data: EventUserUpdate },
  TContext
> => {
  const mutationOptions =
    getPutApiEventsEventIdUsersUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Remove a user from an event
 * @summary Remove user from event
 */
export const deleteApiEventsEventIdUsersUserId = (
  eventId: number,
  userId: number,
) => {
  return axiosInstance<void>({
    url: `/api/events/${eventId}/users/${userId}`,
    method: "DELETE",
  });
};

export const getDeleteApiEventsEventIdUsersUserIdMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteApiEventsEventIdUsersUserId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number },
    TContext
  >;
}) => {
  const mutationKey = ["deleteApiEventsEventIdUsersUserId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiEventsEventIdUsersUserId>>,
    { eventId: number; userId: number }
  > = (props) => {
    const { eventId, userId } = props ?? {};

    return deleteApiEventsEventIdUsersUserId(eventId, userId);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number },
    TContext
  >;
};

export type DeleteApiEventsEventIdUsersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiEventsEventIdUsersUserId>>
>;

export type DeleteApiEventsEventIdUsersUserIdMutationError =
  void | DefaultErrorResponse;

/**
 * @summary Remove user from event
 */
export const useDeleteApiEventsEventIdUsersUserId = <
  TData = Awaited<ReturnType<typeof deleteApiEventsEventIdUsersUserId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { eventId: number; userId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiEventsEventIdUsersUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update speaker information for a user in an event
 * @summary Update speaker info
 */
export const putApiEventsEventIdUsersUserIdSpeakerInfo = (
  eventId: number,
  userId: number,
  eventSpeakerInfoUpdate: EventSpeakerInfoUpdate,
) => {
  return axiosInstance<EventUserDetail>({
    url: `/api/events/${eventId}/users/${userId}/speaker-info`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: eventSpeakerInfoUpdate,
  });
};

export const getPutApiEventsEventIdUsersUserIdSpeakerInfoMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiEventsEventIdUsersUserIdSpeakerInfo>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number; data: EventSpeakerInfoUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiEventsEventIdUsersUserIdSpeakerInfo"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiEventsEventIdUsersUserIdSpeakerInfo>>,
    { eventId: number; userId: number; data: EventSpeakerInfoUpdate }
  > = (props) => {
    const { eventId, userId, data } = props ?? {};

    return putApiEventsEventIdUsersUserIdSpeakerInfo(eventId, userId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number; data: EventSpeakerInfoUpdate },
    TContext
  >;
};

export type PutApiEventsEventIdUsersUserIdSpeakerInfoMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof putApiEventsEventIdUsersUserIdSpeakerInfo>>
  >;
export type PutApiEventsEventIdUsersUserIdSpeakerInfoMutationBody =
  EventSpeakerInfoUpdate;
export type PutApiEventsEventIdUsersUserIdSpeakerInfoMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update speaker info
 */
export const usePutApiEventsEventIdUsersUserIdSpeakerInfo = <
  TData = Awaited<ReturnType<typeof putApiEventsEventIdUsersUserIdSpeakerInfo>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; userId: number; data: EventSpeakerInfoUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { eventId: number; userId: number; data: EventSpeakerInfoUpdate },
  TContext
> => {
  const mutationOptions =
    getPutApiEventsEventIdUsersUserIdSpeakerInfoMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get all sessions for an event
 * @summary List event sessions
 */
export const getApiEventsEventIdSessions = (
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetApiEventsEventIdSessions200>({
    url: `/api/events/${eventId}/sessions`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiEventsEventIdSessionsQueryKey = (
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
) => {
  return [
    `/api/events/${eventId}/sessions`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiEventsEventIdSessionsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdSessions>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiEventsEventIdSessionsQueryKey(eventId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiEventsEventIdSessions>>
  > = ({ signal }) => getApiEventsEventIdSessions(eventId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEventsEventIdSessionsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiEventsEventIdSessions>>
>;
export type GetApiEventsEventIdSessionsInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiEventsEventIdSessionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdSessions>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params: undefined | GetApiEventsEventIdSessionsParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdSessionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdSessions>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdSessionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdSessions>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List event sessions
 */

export function useGetApiEventsEventIdSessionsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiEventsEventIdSessions>>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiEventsEventIdSessionsInfiniteQueryOptions(
    eventId,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiEventsEventIdSessionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiEventsEventIdSessionsQueryKey(eventId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiEventsEventIdSessions>>
  > = ({ signal }) => getApiEventsEventIdSessions(eventId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiEventsEventIdSessionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiEventsEventIdSessions>>
>;
export type GetApiEventsEventIdSessionsQueryError = void | DefaultErrorResponse;

export function useGetApiEventsEventIdSessions<
  TData = Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params: undefined | GetApiEventsEventIdSessionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdSessions<
  TData = Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiEventsEventIdSessions<
  TData = Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List event sessions
 */

export function useGetApiEventsEventIdSessions<
  TData = Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
  TError = void | DefaultErrorResponse,
>(
  eventId: number,
  params?: GetApiEventsEventIdSessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiEventsEventIdSessions>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiEventsEventIdSessionsQueryOptions(
    eventId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new session in the event
 * @summary Create new session
 */
export const postApiEventsEventIdSessions = (
  eventId: number,
  sessionCreate: SessionCreate,
  signal?: AbortSignal,
) => {
  return axiosInstance<SessionDetail>({
    url: `/api/events/${eventId}/sessions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: sessionCreate,
    signal,
  });
};

export const getPostApiEventsEventIdSessionsMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiEventsEventIdSessions>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: SessionCreate },
    TContext
  >;
}) => {
  const mutationKey = ["postApiEventsEventIdSessions"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiEventsEventIdSessions>>,
    { eventId: number; data: SessionCreate }
  > = (props) => {
    const { eventId, data } = props ?? {};

    return postApiEventsEventIdSessions(eventId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: SessionCreate },
    TContext
  >;
};

export type PostApiEventsEventIdSessionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiEventsEventIdSessions>>
>;
export type PostApiEventsEventIdSessionsMutationBody = SessionCreate;
export type PostApiEventsEventIdSessionsMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Create new session
 */
export const usePostApiEventsEventIdSessions = <
  TData = Awaited<ReturnType<typeof postApiEventsEventIdSessions>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { eventId: number; data: SessionCreate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { eventId: number; data: SessionCreate },
  TContext
> => {
  const mutationOptions =
    getPostApiEventsEventIdSessionsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get session details
 */
export const getApiSessionsSessionId = (
  sessionId: number,
  signal?: AbortSignal,
) => {
  return axiosInstance<SessionDetail>({
    url: `/api/sessions/${sessionId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiSessionsSessionIdQueryKey = (sessionId: number) => {
  return [`/api/sessions/${sessionId}`] as const;
};

export const getGetApiSessionsSessionIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getApiSessionsSessionId>>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiSessionsSessionIdQueryKey(sessionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiSessionsSessionId>>
  > = ({ signal }) => getApiSessionsSessionId(sessionId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!sessionId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiSessionsSessionId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSessionsSessionIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSessionsSessionId>>
>;
export type GetApiSessionsSessionIdInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiSessionsSessionIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiSessionsSessionId>>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiSessionsSessionId>>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiSessionsSessionId>>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get session details
 */

export function useGetApiSessionsSessionIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getApiSessionsSessionId>>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiSessionsSessionIdInfiniteQueryOptions(
    sessionId,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiSessionsSessionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiSessionsSessionIdQueryKey(sessionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiSessionsSessionId>>
  > = ({ signal }) => getApiSessionsSessionId(sessionId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!sessionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiSessionsSessionId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSessionsSessionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSessionsSessionId>>
>;
export type GetApiSessionsSessionIdQueryError = void | DefaultErrorResponse;

export function useGetApiSessionsSessionId<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionId<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionId<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get session details
 */

export function useGetApiSessionsSessionId<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionId>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiSessionsSessionIdQueryOptions(
    sessionId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update session
 */
export const putApiSessionsSessionId = (
  sessionId: number,
  sessionUpdate: SessionUpdate,
) => {
  return axiosInstance<SessionDetail>({
    url: `/api/sessions/${sessionId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: sessionUpdate,
  });
};

export const getPutApiSessionsSessionIdMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiSessionsSessionId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiSessionsSessionId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiSessionsSessionId>>,
    { sessionId: number; data: SessionUpdate }
  > = (props) => {
    const { sessionId, data } = props ?? {};

    return putApiSessionsSessionId(sessionId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionUpdate },
    TContext
  >;
};

export type PutApiSessionsSessionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiSessionsSessionId>>
>;
export type PutApiSessionsSessionIdMutationBody = SessionUpdate;
export type PutApiSessionsSessionIdMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update session
 */
export const usePutApiSessionsSessionId = <
  TData = Awaited<ReturnType<typeof putApiSessionsSessionId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { sessionId: number; data: SessionUpdate },
  TContext
> => {
  const mutationOptions = getPutApiSessionsSessionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete session
 */
export const deleteApiSessionsSessionId = (sessionId: number) => {
  return axiosInstance<void>({
    url: `/api/sessions/${sessionId}`,
    method: "DELETE",
  });
};

export const getDeleteApiSessionsSessionIdMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteApiSessionsSessionId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { sessionId: number }, TContext>;
}) => {
  const mutationKey = ["deleteApiSessionsSessionId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiSessionsSessionId>>,
    { sessionId: number }
  > = (props) => {
    const { sessionId } = props ?? {};

    return deleteApiSessionsSessionId(sessionId);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { sessionId: number },
    TContext
  >;
};

export type DeleteApiSessionsSessionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiSessionsSessionId>>
>;

export type DeleteApiSessionsSessionIdMutationError =
  void | DefaultErrorResponse;

/**
 * @summary Delete session
 */
export const useDeleteApiSessionsSessionId = <
  TData = Awaited<ReturnType<typeof deleteApiSessionsSessionId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { sessionId: number }, TContext>;
}): UseMutationResult<TData, TError, { sessionId: number }, TContext> => {
  const mutationOptions = getDeleteApiSessionsSessionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update session status
 */
export const putApiSessionsSessionIdStatus = (
  sessionId: number,
  sessionStatusUpdate: SessionStatusUpdate,
) => {
  return axiosInstance<SessionDetail>({
    url: `/api/sessions/${sessionId}/status`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: sessionStatusUpdate,
  });
};

export const getPutApiSessionsSessionIdStatusMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiSessionsSessionIdStatus>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionStatusUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiSessionsSessionIdStatus"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiSessionsSessionIdStatus>>,
    { sessionId: number; data: SessionStatusUpdate }
  > = (props) => {
    const { sessionId, data } = props ?? {};

    return putApiSessionsSessionIdStatus(sessionId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionStatusUpdate },
    TContext
  >;
};

export type PutApiSessionsSessionIdStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiSessionsSessionIdStatus>>
>;
export type PutApiSessionsSessionIdStatusMutationBody = SessionStatusUpdate;
export type PutApiSessionsSessionIdStatusMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update session status
 */
export const usePutApiSessionsSessionIdStatus = <
  TData = Awaited<ReturnType<typeof putApiSessionsSessionIdStatus>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionStatusUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { sessionId: number; data: SessionStatusUpdate },
  TContext
> => {
  const mutationOptions =
    getPutApiSessionsSessionIdStatusMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update session times
 */
export const putApiSessionsSessionIdTimes = (
  sessionId: number,
  sessionTimesUpdate: SessionTimesUpdate,
) => {
  return axiosInstance<SessionDetail>({
    url: `/api/sessions/${sessionId}/times`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: sessionTimesUpdate,
  });
};

export const getPutApiSessionsSessionIdTimesMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiSessionsSessionIdTimes>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionTimesUpdate },
    TContext
  >;
}) => {
  const mutationKey = ["putApiSessionsSessionIdTimes"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiSessionsSessionIdTimes>>,
    { sessionId: number; data: SessionTimesUpdate }
  > = (props) => {
    const { sessionId, data } = props ?? {};

    return putApiSessionsSessionIdTimes(sessionId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionTimesUpdate },
    TContext
  >;
};

export type PutApiSessionsSessionIdTimesMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiSessionsSessionIdTimes>>
>;
export type PutApiSessionsSessionIdTimesMutationBody = SessionTimesUpdate;
export type PutApiSessionsSessionIdTimesMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update session times
 */
export const usePutApiSessionsSessionIdTimes = <
  TData = Awaited<ReturnType<typeof putApiSessionsSessionIdTimes>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SessionTimesUpdate },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { sessionId: number; data: SessionTimesUpdate },
  TContext
> => {
  const mutationOptions =
    getPutApiSessionsSessionIdTimesMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary List session speakers
 */
export const getApiSessionsSessionIdSpeakers = (
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetApiSessionsSessionIdSpeakers200>({
    url: `/api/sessions/${sessionId}/speakers`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiSessionsSessionIdSpeakersQueryKey = (
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
) => {
  return [
    `/api/sessions/${sessionId}/speakers`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiSessionsSessionIdSpeakersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiSessionsSessionIdSpeakersQueryKey(sessionId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
  > = ({ signal }) =>
    getApiSessionsSessionIdSpeakers(sessionId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!sessionId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSessionsSessionIdSpeakersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
>;
export type GetApiSessionsSessionIdSpeakersInfiniteQueryError =
  void | DefaultErrorResponse;

export function useGetApiSessionsSessionIdSpeakersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params: undefined | GetApiSessionsSessionIdSpeakersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionIdSpeakersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionIdSpeakersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List session speakers
 */

export function useGetApiSessionsSessionIdSpeakersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
  >,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    >;
  },
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiSessionsSessionIdSpeakersInfiniteQueryOptions(
    sessionId,
    params,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetApiSessionsSessionIdSpeakersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiSessionsSessionIdSpeakersQueryKey(sessionId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
  > = ({ signal }) =>
    getApiSessionsSessionIdSpeakers(sessionId, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!sessionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSessionsSessionIdSpeakersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>
>;
export type GetApiSessionsSessionIdSpeakersQueryError =
  void | DefaultErrorResponse;

export function useGetApiSessionsSessionIdSpeakers<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params: undefined | GetApiSessionsSessionIdSpeakersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionIdSpeakers<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
          TError,
          TData
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSessionsSessionIdSpeakers<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List session speakers
 */

export function useGetApiSessionsSessionIdSpeakers<
  TData = Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
  TError = void | DefaultErrorResponse,
>(
  sessionId: number,
  params?: GetApiSessionsSessionIdSpeakersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiSessionsSessionIdSpeakers>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiSessionsSessionIdSpeakersQueryOptions(
    sessionId,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Add speaker to session
 */
export const postApiSessionsSessionIdSpeakers = (
  sessionId: number,
  schemaMeta2: SchemaMeta2,
  signal?: AbortSignal,
) => {
  return axiosInstance<SessionSpeakerDetailSchema>({
    url: `/api/sessions/${sessionId}/speakers`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: schemaMeta2,
    signal,
  });
};

export const getPostApiSessionsSessionIdSpeakersMutationOptions = <
  TData = Awaited<ReturnType<typeof postApiSessionsSessionIdSpeakers>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SchemaMeta2 },
    TContext
  >;
}) => {
  const mutationKey = ["postApiSessionsSessionIdSpeakers"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiSessionsSessionIdSpeakers>>,
    { sessionId: number; data: SchemaMeta2 }
  > = (props) => {
    const { sessionId, data } = props ?? {};

    return postApiSessionsSessionIdSpeakers(sessionId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SchemaMeta2 },
    TContext
  >;
};

export type PostApiSessionsSessionIdSpeakersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiSessionsSessionIdSpeakers>>
>;
export type PostApiSessionsSessionIdSpeakersMutationBody = SchemaMeta2;
export type PostApiSessionsSessionIdSpeakersMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Add speaker to session
 */
export const usePostApiSessionsSessionIdSpeakers = <
  TData = Awaited<ReturnType<typeof postApiSessionsSessionIdSpeakers>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; data: SchemaMeta2 },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { sessionId: number; data: SchemaMeta2 },
  TContext
> => {
  const mutationOptions =
    getPostApiSessionsSessionIdSpeakersMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update a speaker's role in the session
 * @summary Update speaker role
 */
export const putApiSessionsSessionIdSpeakersUserId = (
  sessionId: number,
  userId: number,
  schemaMeta3: SchemaMeta3,
) => {
  return axiosInstance<SessionSpeakerDetailSchema>({
    url: `/api/sessions/${sessionId}/speakers/${userId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: schemaMeta3,
  });
};

export const getPutApiSessionsSessionIdSpeakersUserIdMutationOptions = <
  TData = Awaited<ReturnType<typeof putApiSessionsSessionIdSpeakersUserId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number; data: SchemaMeta3 },
    TContext
  >;
}) => {
  const mutationKey = ["putApiSessionsSessionIdSpeakersUserId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiSessionsSessionIdSpeakersUserId>>,
    { sessionId: number; userId: number; data: SchemaMeta3 }
  > = (props) => {
    const { sessionId, userId, data } = props ?? {};

    return putApiSessionsSessionIdSpeakersUserId(sessionId, userId, data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number; data: SchemaMeta3 },
    TContext
  >;
};

export type PutApiSessionsSessionIdSpeakersUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiSessionsSessionIdSpeakersUserId>>
>;
export type PutApiSessionsSessionIdSpeakersUserIdMutationBody = SchemaMeta3;
export type PutApiSessionsSessionIdSpeakersUserIdMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update speaker role
 */
export const usePutApiSessionsSessionIdSpeakersUserId = <
  TData = Awaited<ReturnType<typeof putApiSessionsSessionIdSpeakersUserId>>,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number; data: SchemaMeta3 },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { sessionId: number; userId: number; data: SchemaMeta3 },
  TContext
> => {
  const mutationOptions =
    getPutApiSessionsSessionIdSpeakersUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Remove a speaker from the session
 * @summary Remove speaker from session
 */
export const deleteApiSessionsSessionIdSpeakersUserId = (
  sessionId: number,
  userId: number,
) => {
  return axiosInstance<DefaultErrorResponse>({
    url: `/api/sessions/${sessionId}/speakers/${userId}`,
    method: "DELETE",
  });
};

export const getDeleteApiSessionsSessionIdSpeakersUserIdMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteApiSessionsSessionIdSpeakersUserId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number },
    TContext
  >;
}) => {
  const mutationKey = ["deleteApiSessionsSessionIdSpeakersUserId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiSessionsSessionIdSpeakersUserId>>,
    { sessionId: number; userId: number }
  > = (props) => {
    const { sessionId, userId } = props ?? {};

    return deleteApiSessionsSessionIdSpeakersUserId(sessionId, userId);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number },
    TContext
  >;
};

export type DeleteApiSessionsSessionIdSpeakersUserIdMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteApiSessionsSessionIdSpeakersUserId>>
  >;

export type DeleteApiSessionsSessionIdSpeakersUserIdMutationError =
  void | DefaultErrorResponse;

/**
 * @summary Remove speaker from session
 */
export const useDeleteApiSessionsSessionIdSpeakersUserId = <
  TData = Awaited<ReturnType<typeof deleteApiSessionsSessionIdSpeakersUserId>>,
  TError = void | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { sessionId: number; userId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiSessionsSessionIdSpeakersUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update the display order of a speaker
 * @summary Update speaker order
 */
export const putApiSessionsSessionIdSpeakersUserIdReorder = (
  sessionId: number,
  userId: number,
  schemaMeta4: SchemaMeta4,
) => {
  return axiosInstance<SessionSpeakerSchema[]>({
    url: `/api/sessions/${sessionId}/speakers/${userId}/reorder`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: schemaMeta4,
  });
};

export const getPutApiSessionsSessionIdSpeakersUserIdReorderMutationOptions = <
  TData = Awaited<
    ReturnType<typeof putApiSessionsSessionIdSpeakersUserIdReorder>
  >,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number; data: SchemaMeta4 },
    TContext
  >;
}) => {
  const mutationKey = ["putApiSessionsSessionIdSpeakersUserIdReorder"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiSessionsSessionIdSpeakersUserIdReorder>>,
    { sessionId: number; userId: number; data: SchemaMeta4 }
  > = (props) => {
    const { sessionId, userId, data } = props ?? {};

    return putApiSessionsSessionIdSpeakersUserIdReorder(
      sessionId,
      userId,
      data,
    );
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number; data: SchemaMeta4 },
    TContext
  >;
};

export type PutApiSessionsSessionIdSpeakersUserIdReorderMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof putApiSessionsSessionIdSpeakersUserIdReorder>>
  >;
export type PutApiSessionsSessionIdSpeakersUserIdReorderMutationBody =
  SchemaMeta4;
export type PutApiSessionsSessionIdSpeakersUserIdReorderMutationError =
  | void
  | UnprocessableContentResponse
  | DefaultErrorResponse;

/**
 * @summary Update speaker order
 */
export const usePutApiSessionsSessionIdSpeakersUserIdReorder = <
  TData = Awaited<
    ReturnType<typeof putApiSessionsSessionIdSpeakersUserIdReorder>
  >,
  TError = void | UnprocessableContentResponse | DefaultErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    TData,
    TError,
    { sessionId: number; userId: number; data: SchemaMeta4 },
    TContext
  >;
}): UseMutationResult<
  TData,
  TError,
  { sessionId: number; userId: number; data: SchemaMeta4 },
  TContext
> => {
  const mutationOptions =
    getPutApiSessionsSessionIdSpeakersUserIdReorderMutationOptions(options);

  return useMutation(mutationOptions);
};
