# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Install dependencies
COPY frontend/package*.json ./
RUN npm ci

# Copy source and build
COPY frontend/ .
# Set NODE_ENV for production build
ENV NODE_ENV=production
RUN npm run build

# Serve stage - Using nginx for much better performance
FROM nginx:alpine

# Remove default nginx config
RUN rm -rf /etc/nginx/conf.d/*

# Copy custom nginx config
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf
COPY frontend/security-headers.conf /etc/nginx/conf.d/security-headers.conf
COPY frontend/csp-header.conf /etc/nginx/conf.d/csp-header.conf

# Copy built files from builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Create a non-root user to run nginx
RUN adduser -D -s /bin/sh nginx-user && \
    chown -R nginx-user:nginx-user /usr/share/nginx/html && \
    chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/log/nginx && \
    touch /var/run/nginx.pid && \
    chown nginx-user:nginx-user /var/run/nginx.pid

# Update nginx config to not run as daemon and use proper user
RUN echo 'user nginx-user;' > /tmp/nginx.conf && \
    cat /etc/nginx/nginx.conf | grep -v '^user' >> /tmp/nginx.conf && \
    mv /tmp/nginx.conf /etc/nginx/nginx.conf

EXPOSE 80

# Run nginx in foreground
CMD ["nginx", "-g", "daemon off;"]