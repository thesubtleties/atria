"""Add event invitations table

Revision ID: 41ee1eccb261
Revises: fractional_display_order
Create Date: 2025-07-18 19:50:44.848166

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = '41ee1eccb261'
down_revision = 'fractional_display_order'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create invitationstatus enum if it doesn't exist
    op.execute("CREATE TYPE invitationstatus AS ENUM ('PENDING', 'ACCEPTED', 'EXPIRED', 'DECLINED', 'CANCELLED')")
    
    op.create_table('event_invitations',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('event_id', sa.BigInteger(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('role', postgresql.ENUM('ADMIN', 'ORGANIZER', 'MODERATOR', 'SPEAKER', 'ATTENDEE', name='eventuserrole', create_type=False), nullable=False),
    sa.Column('token', sa.String(length=64), nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'ACCEPTED', 'EXPIRED', 'DECLINED', 'CANCELLED', name='invitationstatus', create_type=False), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('invited_by_id', sa.BigInteger(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('accepted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('declined_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('event_invitations', schema=None) as batch_op:
        batch_op.create_index('idx_event_email', ['event_id', 'email'], unique=False)
        batch_op.create_index('idx_event_status', ['event_id', 'status'], unique=False)
        batch_op.create_index('idx_expires_at', ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_event_invitations_email'), ['email'], unique=False)
        batch_op.create_index(batch_op.f('ix_event_invitations_token'), ['token'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('event_invitations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_event_invitations_token'))
        batch_op.drop_index(batch_op.f('ix_event_invitations_email'))
        batch_op.drop_index('idx_expires_at')
        batch_op.drop_index('idx_event_status')
        batch_op.drop_index('idx_event_email')

    op.drop_table('event_invitations')
    
    # Drop invitationstatus enum if it exists
    op.execute("DROP TYPE IF EXISTS invitationstatus")
    # ### end Alembic commands ###
